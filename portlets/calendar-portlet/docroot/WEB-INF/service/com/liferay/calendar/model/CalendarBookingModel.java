/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.calendar.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.GroupedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the CalendarBooking service. Represents a row in the &quot;CalendarBooking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.calendar.model.impl.CalendarBookingModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.calendar.model.impl.CalendarBookingImpl}.
 * </p>
 *
 * @author Eduardo Lundgren
 * @see CalendarBooking
 * @see com.liferay.calendar.model.impl.CalendarBookingImpl
 * @see com.liferay.calendar.model.impl.CalendarBookingModelImpl
 * @generated
 */
public interface CalendarBookingModel extends BaseModel<CalendarBooking>,
	GroupedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a calendar booking model instance should use the {@link CalendarBooking} interface instead.
	 */

	/**
	 * Gets the primary key of this calendar booking.
	 *
	 * @return the primary key of this calendar booking
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this calendar booking
	 *
	 * @param pk the primary key of this calendar booking
	 */
	public void setPrimaryKey(long pk);

	/**
	 * Gets the uuid of this calendar booking.
	 *
	 * @return the uuid of this calendar booking
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this calendar booking.
	 *
	 * @param uuid the uuid of this calendar booking
	 */
	public void setUuid(String uuid);

	/**
	 * Gets the calendar booking ID of this calendar booking.
	 *
	 * @return the calendar booking ID of this calendar booking
	 */
	public long getCalendarBookingId();

	/**
	 * Sets the calendar booking ID of this calendar booking.
	 *
	 * @param calendarBookingId the calendar booking ID of this calendar booking
	 */
	public void setCalendarBookingId(long calendarBookingId);

	/**
	 * Gets the group ID of this calendar booking.
	 *
	 * @return the group ID of this calendar booking
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this calendar booking.
	 *
	 * @param groupId the group ID of this calendar booking
	 */
	public void setGroupId(long groupId);

	/**
	 * Gets the company ID of this calendar booking.
	 *
	 * @return the company ID of this calendar booking
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this calendar booking.
	 *
	 * @param companyId the company ID of this calendar booking
	 */
	public void setCompanyId(long companyId);

	/**
	 * Gets the user ID of this calendar booking.
	 *
	 * @return the user ID of this calendar booking
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this calendar booking.
	 *
	 * @param userId the user ID of this calendar booking
	 */
	public void setUserId(long userId);

	/**
	 * Gets the user uuid of this calendar booking.
	 *
	 * @return the user uuid of this calendar booking
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this calendar booking.
	 *
	 * @param userUuid the user uuid of this calendar booking
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Gets the user name of this calendar booking.
	 *
	 * @return the user name of this calendar booking
	 */
	@AutoEscape
	public String getUserName();

	/**
	 * Sets the user name of this calendar booking.
	 *
	 * @param userName the user name of this calendar booking
	 */
	public void setUserName(String userName);

	/**
	 * Gets the create date of this calendar booking.
	 *
	 * @return the create date of this calendar booking
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this calendar booking.
	 *
	 * @param createDate the create date of this calendar booking
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Gets the modified date of this calendar booking.
	 *
	 * @return the modified date of this calendar booking
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this calendar booking.
	 *
	 * @param modifiedDate the modified date of this calendar booking
	 */
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Gets the calendar event ID of this calendar booking.
	 *
	 * @return the calendar event ID of this calendar booking
	 */
	public long getCalendarEventId();

	/**
	 * Sets the calendar event ID of this calendar booking.
	 *
	 * @param calendarEventId the calendar event ID of this calendar booking
	 */
	public void setCalendarEventId(long calendarEventId);

	/**
	 * Gets the calendar resource ID of this calendar booking.
	 *
	 * @return the calendar resource ID of this calendar booking
	 */
	public long getCalendarResourceId();

	/**
	 * Sets the calendar resource ID of this calendar booking.
	 *
	 * @param calendarResourceId the calendar resource ID of this calendar booking
	 */
	public void setCalendarResourceId(long calendarResourceId);

	/**
	 * Gets the class name of the model instance this calendar booking is polymorphically associated with.
	 *
	 * @return the class name of the model instance this calendar booking is polymorphically associated with
	 */
	public String getClassName();

	/**
	 * Gets the class name ID of this calendar booking.
	 *
	 * @return the class name ID of this calendar booking
	 */
	public long getClassNameId();

	/**
	 * Sets the class name ID of this calendar booking.
	 *
	 * @param classNameId the class name ID of this calendar booking
	 */
	public void setClassNameId(long classNameId);

	/**
	 * Gets the class p k of this calendar booking.
	 *
	 * @return the class p k of this calendar booking
	 */
	public long getClassPK();

	/**
	 * Sets the class p k of this calendar booking.
	 *
	 * @param classPK the class p k of this calendar booking
	 */
	public void setClassPK(long classPK);

	/**
	 * Gets the title of this calendar booking.
	 *
	 * @return the title of this calendar booking
	 */
	public String getTitle();

	/**
	 * Gets the localized title of this calendar booking. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale to get the localized title for
	 * @return the localized title of this calendar booking
	 */
	public String getTitle(Locale locale);

	/**
	 * Gets the localized title of this calendar booking, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local to get the localized title for
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this calendar booking. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Gets the localized title of this calendar booking. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the id of the language to get the localized title for
	 * @return the localized title of this calendar booking
	 */
	public String getTitle(String languageId);

	/**
	 * Gets the localized title of this calendar booking, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the id of the language to get the localized title for
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this calendar booking
	 */
	public String getTitle(String languageId, boolean useDefault);

	/**
	 * Gets a map of the locales and localized title of this calendar booking.
	 *
	 * @return the locales and localized title
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this calendar booking.
	 *
	 * @param title the title of this calendar booking
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this calendar booking.
	 *
	 * @param title the localized title of this calendar booking
	 * @param locale the locale to set the localized title for
	 */
	public void setTitle(String title, Locale locale);

	public void setTitle(String title, Locale locale, Locale defaultLocale);

	/**
	 * Sets the localized titles of this calendar booking from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this calendar booking
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Gets the name of this calendar booking.
	 *
	 * @return the name of this calendar booking
	 */
	public String getName();

	/**
	 * Gets the localized name of this calendar booking. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale to get the localized name for
	 * @return the localized name of this calendar booking
	 */
	public String getName(Locale locale);

	/**
	 * Gets the localized name of this calendar booking, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local to get the localized name for
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this calendar booking. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	public String getName(Locale locale, boolean useDefault);

	/**
	 * Gets the localized name of this calendar booking. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the id of the language to get the localized name for
	 * @return the localized name of this calendar booking
	 */
	public String getName(String languageId);

	/**
	 * Gets the localized name of this calendar booking, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the id of the language to get the localized name for
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this calendar booking
	 */
	public String getName(String languageId, boolean useDefault);

	/**
	 * Gets a map of the locales and localized name of this calendar booking.
	 *
	 * @return the locales and localized name
	 */
	public Map<Locale, String> getNameMap();

	/**
	 * Sets the name of this calendar booking.
	 *
	 * @param name the name of this calendar booking
	 */
	public void setName(String name);

	/**
	 * Sets the localized name of this calendar booking.
	 *
	 * @param name the localized name of this calendar booking
	 * @param locale the locale to set the localized name for
	 */
	public void setName(String name, Locale locale);

	public void setName(String name, Locale locale, Locale defaultLocale);

	/**
	 * Sets the localized names of this calendar booking from the map of locales and localized names.
	 *
	 * @param nameMap the locales and localized names of this calendar booking
	 */
	public void setNameMap(Map<Locale, String> nameMap);

	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale);

	/**
	 * Gets the description of this calendar booking.
	 *
	 * @return the description of this calendar booking
	 */
	public String getDescription();

	/**
	 * Gets the localized description of this calendar booking. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale to get the localized description for
	 * @return the localized description of this calendar booking
	 */
	public String getDescription(Locale locale);

	/**
	 * Gets the localized description of this calendar booking, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local to get the localized description for
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this calendar booking. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Gets the localized description of this calendar booking. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the id of the language to get the localized description for
	 * @return the localized description of this calendar booking
	 */
	public String getDescription(String languageId);

	/**
	 * Gets the localized description of this calendar booking, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the id of the language to get the localized description for
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this calendar booking
	 */
	public String getDescription(String languageId, boolean useDefault);

	/**
	 * Gets a map of the locales and localized description of this calendar booking.
	 *
	 * @return the locales and localized description
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this calendar booking.
	 *
	 * @param description the description of this calendar booking
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this calendar booking.
	 *
	 * @param description the localized description of this calendar booking
	 * @param locale the locale to set the localized description for
	 */
	public void setDescription(String description, Locale locale);

	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	/**
	 * Sets the localized descriptions of this calendar booking from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this calendar booking
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	/**
	 * Gets the location of this calendar booking.
	 *
	 * @return the location of this calendar booking
	 */
	@AutoEscape
	public String getLocation();

	/**
	 * Sets the location of this calendar booking.
	 *
	 * @param location the location of this calendar booking
	 */
	public void setLocation(String location);

	/**
	 * Gets the start date of this calendar booking.
	 *
	 * @return the start date of this calendar booking
	 */
	public Date getStartDate();

	/**
	 * Sets the start date of this calendar booking.
	 *
	 * @param startDate the start date of this calendar booking
	 */
	public void setStartDate(Date startDate);

	/**
	 * Gets the end date of this calendar booking.
	 *
	 * @return the end date of this calendar booking
	 */
	public Date getEndDate();

	/**
	 * Sets the end date of this calendar booking.
	 *
	 * @param endDate the end date of this calendar booking
	 */
	public void setEndDate(Date endDate);

	/**
	 * Gets the duration hour of this calendar booking.
	 *
	 * @return the duration hour of this calendar booking
	 */
	public int getDurationHour();

	/**
	 * Sets the duration hour of this calendar booking.
	 *
	 * @param durationHour the duration hour of this calendar booking
	 */
	public void setDurationHour(int durationHour);

	/**
	 * Gets the duration minute of this calendar booking.
	 *
	 * @return the duration minute of this calendar booking
	 */
	public int getDurationMinute();

	/**
	 * Sets the duration minute of this calendar booking.
	 *
	 * @param durationMinute the duration minute of this calendar booking
	 */
	public void setDurationMinute(int durationMinute);

	/**
	 * Gets the recurrence of this calendar booking.
	 *
	 * @return the recurrence of this calendar booking
	 */
	@AutoEscape
	public String getRecurrence();

	/**
	 * Sets the recurrence of this calendar booking.
	 *
	 * @param recurrence the recurrence of this calendar booking
	 */
	public void setRecurrence(String recurrence);

	/**
	 * Gets the type of this calendar booking.
	 *
	 * @return the type of this calendar booking
	 */
	@AutoEscape
	public String getType();

	/**
	 * Sets the type of this calendar booking.
	 *
	 * @param type the type of this calendar booking
	 */
	public void setType(String type);

	/**
	 * Gets the status ID of this calendar booking.
	 *
	 * @return the status ID of this calendar booking
	 */
	public int getStatusId();

	/**
	 * Sets the status ID of this calendar booking.
	 *
	 * @param statusId the status ID of this calendar booking
	 */
	public void setStatusId(int statusId);

	/**
	 * Gets the required of this calendar booking.
	 *
	 * @return the required of this calendar booking
	 */
	public boolean getRequired();

	/**
	 * Determines if this calendar booking is required.
	 *
	 * @return <code>true</code> if this calendar booking is required; <code>false</code> otherwise
	 */
	public boolean isRequired();

	/**
	 * Sets whether this calendar booking is required.
	 *
	 * @param required the required of this calendar booking
	 */
	public void setRequired(boolean required);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public void setEscapedModel(boolean escapedModel);

	public Serializable getPrimaryKeyObj();

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(CalendarBooking calendarBooking);

	public int hashCode();

	public CalendarBooking toEscapedModel();

	public String toString();

	public String toXmlString();
}