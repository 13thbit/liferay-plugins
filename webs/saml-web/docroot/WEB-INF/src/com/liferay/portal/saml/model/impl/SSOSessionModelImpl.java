/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.saml.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.saml.model.SSOSession;
import com.liferay.portal.saml.model.SSOSessionModel;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the SSOSession service. Represents a row in the &quot;SAML_SSOSession&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.saml.model.SSOSessionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SSOSessionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SSOSessionImpl
 * @see com.liferay.portal.saml.model.SSOSession
 * @see com.liferay.portal.saml.model.SSOSessionModel
 * @generated
 */
public class SSOSessionModelImpl extends BaseModelImpl<SSOSession>
	implements SSOSessionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s s o session model instance should use the {@link com.liferay.portal.saml.model.SSOSession} interface instead.
	 */
	public static final String TABLE_NAME = "SAML_SSOSession";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ssoSessionId", new Integer(Types.BIGINT) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) },
			{ "createDate", new Integer(Types.TIMESTAMP) },
			{ "lastActiveDate", new Integer(Types.TIMESTAMP) },
			{ "key_", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table SAML_SSOSession (ssoSessionId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,lastActiveDate DATE null,key_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SAML_SSOSession";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.saml.model.SSOSession"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.saml.model.SSOSession"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.saml.model.SSOSession"));

	public SSOSessionModelImpl() {
	}

	public long getPrimaryKey() {
		return _ssoSessionId;
	}

	public void setPrimaryKey(long pk) {
		setSsoSessionId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ssoSessionId);
	}

	public long getSsoSessionId() {
		return _ssoSessionId;
	}

	public void setSsoSessionId(long ssoSessionId) {
		_ssoSessionId = ssoSessionId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getLastActiveDate() {
		return _lastActiveDate;
	}

	public void setLastActiveDate(Date lastActiveDate) {
		_lastActiveDate = lastActiveDate;
	}

	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	public void setKey(String key) {
		_key = key;

		if (_originalKey == null) {
			_originalKey = key;
		}
	}

	public String getOriginalKey() {
		return GetterUtil.getString(_originalKey);
	}

	public SSOSession toEscapedModel() {
		if (isEscapedModel()) {
			return (SSOSession)this;
		}
		else {
			return (SSOSession)Proxy.newProxyInstance(SSOSession.class.getClassLoader(),
				new Class[] { SSOSession.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					SSOSession.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		SSOSessionImpl clone = new SSOSessionImpl();

		clone.setSsoSessionId(getSsoSessionId());
		clone.setCompanyId(getCompanyId());
		clone.setUserId(getUserId());
		clone.setCreateDate(getCreateDate());
		clone.setLastActiveDate(getLastActiveDate());
		clone.setKey(getKey());

		return clone;
	}

	public int compareTo(SSOSession ssoSession) {
		long pk = ssoSession.getPrimaryKey();

		if (getPrimaryKey() < pk) {
			return -1;
		}
		else if (getPrimaryKey() > pk) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		SSOSession ssoSession = null;

		try {
			ssoSession = (SSOSession)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = ssoSession.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{ssoSessionId=");
		sb.append(getSsoSessionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", lastActiveDate=");
		sb.append(getLastActiveDate());
		sb.append(", key=");
		sb.append(getKey());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.saml.model.SSOSession");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ssoSessionId</column-name><column-value><![CDATA[");
		sb.append(getSsoSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastActiveDate</column-name><column-value><![CDATA[");
		sb.append(getLastActiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _ssoSessionId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _lastActiveDate;
	private String _key;
	private String _originalKey;
	private transient ExpandoBridge _expandoBridge;
}